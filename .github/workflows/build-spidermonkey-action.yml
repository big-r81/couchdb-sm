name: Couchdb Spidermonkey

on: [ workflow_dispatch,push ]

jobs:

  mozjs:
    name: 'Building Spidermonkey v${{ matrix.mozjs-version }} @ ${{ matrix.os }}'
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        mozjs-version: [ 91, 102, 115, 128 ]
        os: [ ubuntu-22.04, windows-2022, macos-14 ]

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Detect latest Spidermonkey version
        shell: bash
        run: |
          ./get_sm.sh ${{ matrix.mozjs-version }}

      - name: Cache Spidermonkey source
        id: cache-dir
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.MOZJS_DIR }}
          key: ${{runner.os}}-${{ env.MOZJS_DIR }}

      - name: Download Spidermonkey source
        if: steps.cache-dir.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir tars
          cd tars
          ../get_sm.sh ${{ matrix.mozjs-version }} download

      - name: Extract Spidermonkey source
        if: steps.cache-dir.outputs.cache-hit != 'true'
        shell: bash
        run: |
          tar -xf tars/${{ env.MOZJS_TAR}}

      - name: Download and extract M4 build tool
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash
        run: |
          curl -s -L --output m4.pkg.tar.zst https://mirror.msys2.org/msys/x86_64/m4-1.4.19-2-x86_64.pkg.tar.zst
          zstd -d m4.pkg.tar.zst
          tar -xf m4.pkg.tar
          echo "M4=${{ github.workspace }}\usr\bin\m4.exe" >> $GITHUB_ENV

      # thanks to https://github.com/conda-forge/pkg-config-feedstock/issues/37
      - name: Solve pkg-config problem
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash -l {0}
        run: |
          mv /c/Strawberry /c/tmp-Strawberry

      - name: Preparing Spidermonkey build
        if: steps.cache-dir.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd ${{ env.MOZJS_DIR }}/js/src
          if [ ! -f "./configure" ]; then cp ./configure.in ./configure; fi
          chmod +x ./configure
          mkdir -p build-opt

      - name: Preparing Spidermonkey build for Windows (SM v91) Pre-Step (remove "-fexperimental-new-pass-manager")
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows' && matrix.mozjs-version == '91'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/build/moz.configure
        run: |
          mv flags.configure flags.configure1.org
          sed '56,60d' flags.configure1.org > flags.configure

      - name: Preparing Spidermonkey build for Windows (SM v102) Pre-Step (https://bugzilla.mozilla.org/show_bug.cgi?id=1751561)
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows' && matrix.mozjs-version == '102'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/mozglue/misc
        run: |
          mv moz.build moz.build1.org
          sed '/"WindowsDllMain.cpp"/d' moz.build1.org > moz.build

      - name: Preparing Spidermonkey build for Windows (SM v91 & v102) Pre-Step (https://bugzilla.mozilla.org/show_bug.cgi?id=1802675)
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows' && matrix.mozjs-version != '115'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/memory/mozalloc
        run: |
          mv moz.build moz.build2.org
          sed 's/if CONFIG\["OS_TARGET"\] == "WINNT":/if CONFIG["MOZ_MEMORY"] and CONFIG["OS_TARGET"] == "WINNT":/g' moz.build2.org > moz.build

      - name: Preparing Spidermonkey build for macOS Pre-Step (https://bugzilla.mozilla.org/show_bug.cgi?id=1802675)
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'macOS'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/build/moz.configure/
        run: |
          echo "INSTALL_NAME_TOOL=$(which install_name_tool)" >> $GITHUB_ENV
          ${{ env.INSTALL_NAME_TOOL }}
          which install_name_tool
          mv toolchain.configure toolchain.configure2.org
          sed 's/"-Wl,--version"/"-Wl,-ld_classic,--version"/g' toolchain.configure2.org > toolchain.configure

      - name: Preparing Spidermonkey build for Windows (SM v91) Add "ntdll.lib" as a linking library (https://users.rust-lang.org/t/rust-compiler-error-when-linking-with-windows-dll/98504)
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows' && matrix.mozjs-version == '91'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/js/src/build
        run: |
          mv moz.build moz.build2.org
          sed 's/"bcrypt",/"bcrypt", "ntdll",/g' moz.build2.org > moz.build

      - name: Set NO_ANSI environment variable to prevent ./configure error on Windows (SM v115) (https://bugzilla.mozilla.org/show_bug.cgi?id=1893252)
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows' && matrix.mozjs-version == '115'
        shell: bash
        run: |
          echo "NO_ANSI=true" >> $GITHUB_ENV

      - name: Fix "BailoutStack should be 8-byte aligned." error on Windows (SM v115) (https://bugzilla.mozilla.org/show_bug.cgi?id=1893416)
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows' && matrix.mozjs-version == '115'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/js/src/jit
        run: |
          sed -i 's/\/\/ Make sure the compiler doesn\x27t add extra padding on 32-bit platforms\./#if \!defined\(JS_CODEGEN_NONE\)\n\/\/ Make sure the compiler doesn\x27t add extra padding on 32-bit platforms\./g' Bailouts.cpp
          sed -i 's/"BailoutStack should be 8-byte aligned.");/"BailoutStack should be 8-byte aligned.");\n#endif/g' Bailouts.cpp
          cat Bailouts.cpp

      - name: Install cbindgen on th macOS 14 runner
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'macOS' && matrix.mozjs-version == '128'
        shell: bash
        run: |
          cargo install --force cbindgen
        
      - name: Preparing Spidermonkey build for Windows
        if: steps.cache-dir.outputs.cache-hit != 'true' && runner.os == 'Windows'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/js/src/build-opt
        run: |
          ../configure --enable-shared-js --disable-ctypes --disable-jit --disable-tests --disable-jemalloc --enable-optimize --enable-hardening --without-intl-api --build-backends=RecursiveMake --disable-debug --enable-gczeal --target=x86_64-pc-mingw32 --host=x86_64-pc-mingw32

      - name: Preparing Spidermonkey build for Linux / macOS
        if: steps.cache-dir.outputs.cache-hit != 'true' && (runner.os == 'Linux' || runner.os == 'macOS')
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/js/src/build-opt
        run: |
          ../configure --enable-shared-js --disable-ctypes --disable-jit --disable-tests --disable-jemalloc --enable-optimize --enable-hardening --without-intl-api --build-backends=RecursiveMake --disable-debug --enable-gczeal

      - name: Build Spidermonkey
        if: steps.cache-dir.outputs.cache-hit != 'true'
        shell: bash
        working-directory: ${{ env.MOZJS_DIR }}/js/src/build-opt
        run: |
          make

      - name: Build release for Windows
        if: runner.os == 'Windows'
        shell: bash
        env:
          BUILD_DIR: ${{runner.os}}-mozjs-${{matrix.mozjs-version}}
        run: |
          mkdir -p $BUILD_DIR/{bin,lib,include}
          cp -L ${{ env.MOZJS_DIR }}/js/src/build-opt/js/src/build/*.pdb $BUILD_DIR/bin
          cp -L ${{ env.MOZJS_DIR }}/js/src/build-opt/js/src/build/*.lib $BUILD_DIR/lib
          cp -L ${{ env.MOZJS_DIR }}/js/src/build-opt/dist/bin/*.dll $BUILD_DIR/bin
          cp -L -r ${{ env.MOZJS_DIR }}/js/src/build-opt/dist/include/* $BUILD_DIR/include

      - name: Build release for Linux
        if: runner.os == 'Linux'
        shell: bash
        env:
          BUILD_DIR: ${{runner.os}}-mozjs-${{matrix.mozjs-version}}
        run: |
          mkdir -p $BUILD_DIR/{bin,lib,include}
          cp -L ${{ env.MOZJS_DIR }}/js/src/build-opt/js/src/build/*.a $BUILD_DIR/lib
          cp -L ${{ env.MOZJS_DIR }}/js/src/build-opt/dist/bin/*.so $BUILD_DIR/bin
          cp -L -r ${{ env.MOZJS_DIR }}/js/src/build-opt/dist/include/* $BUILD_DIR/include

      - name: Build release for macOS
        if: runner.os == 'macOS'
        shell: bash
        env:
          BUILD_DIR: ${{runner.os}}-mozjs-${{matrix.mozjs-version}}
        run: |
          mkdir -p $BUILD_DIR/{bin,lib,include}
          cp -L ${{ env.MOZJS_DIR }}/js/src/build-opt/js/src/build/*.a $BUILD_DIR/lib
          cp -L ${{ env.MOZJS_DIR }}/js/src/build-opt/dist/bin/*.dylib $BUILD_DIR/bin
          cp -L -r ${{ env.MOZJS_DIR }}/js/src/build-opt/dist/include/* $BUILD_DIR/include

      - name: Package Spidermonkey
        shell: bash
        run: |
          XZ_OPT='-9' tar cvJf ${{runner.os}}-mozjs-${{matrix.mozjs-version}}.tar.xz ${{runner.os}}-mozjs-${{matrix.mozjs-version}}

      - name: Archive Spidermonkey
        uses: actions/upload-artifact@v4
        with:
          name: ${{runner.os}}-mozjs-${{matrix.mozjs-version}}
          path: ${{runner.os}}-mozjs-${{matrix.mozjs-version}}.tar.xz

      - name: Release Spidermonkey
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{runner.os}}-mozjs-${{matrix.mozjs-version}}.tar.xz
